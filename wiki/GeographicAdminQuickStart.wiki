#labels Featured,Phase-Deploy
= Geographic Admin =
Getting started with the Geographic Admin Project

=== Overview ===

This [http://code.google.com/p/geodjango-basic-apps/source/browse/trunk/projects/geographic_admin Download] provides a sample project called 'geographic_admin' with an application called 'world'.

It is meant to be a boilerplate, but fully-baked, hello world example that highlights a few of the most easily enabled !GeoDjango features. 

The project code highlights how to spatially enable the the Admin and Databrowse contrib applications with an !OpenLayers map interface and !OpenStreetMap basedata in the Google Mercator Projection (EPSG:900913), utilizing a world borders shapefile from [www.thematicmapping.com Thematic Mapping Blog] in WGS 84 projection (EPSG:4326).

 * This project should be a useful place to start if you are familiar with Django but new to !GeoDjango and GIS/mapping ideas. It should also be useful to folks familiar with mapping but new to web development and not afraid to dive into some python code. With just a few settings tweaks to your django configuration file for your database user and password you should be able to get up and running.

 * The biggest challenge for users new to GIS will be installing the dependencies of GEOS and GDAL. If you have trouble feel free to drop into the #geodjango room on freenode IRC.

=== Dependencies for !GeographicAdmin ===

 * PostgreSQL
 * PostGIS (with spatial_ref_sys entry for srid 900913)
 * Psycopg2
 * GEOS
 * Proj.4
 * GDAL
 * Internet Connection (for !OpenLayers JS and !OpenStreetMap tiles)

* See http://code.djangoproject.com/wiki/GeoDjangoInstall for all installation details.

== Steps to Run Geographic Admin  ==

=== Step 1 ===

Install Django from Trunk:
{{{
svn co http://code.djangoproject.com/svn/django/trunk/ django-svn-trunk
}}}

Make sure that Django is on your PYTHONPATH.
{{{
$ export PYTHONPATH=/path/to/django-svn-trunk:
# or put that in your .bash_profile (environment settings)
}}}

Test that Django can be found on PYTHONPATH
{{{
$ python
>>> import django # should cause no errors
}}}

=== Step 2 ===

Download the Geographic Admin project [http://code.google.com/p/geodjango-basic-apps/source/browse/trunk/projects/geographic_admin directory] to your desired location on your local filesystem.
{{{
$ svn checkout http://geodjango-basic-apps.googlecode.com/svn/trunk/projects/geographic_admin
$ cd geographic_admin # your new project directory
}}}
 * Note: this project's settings uses dynamic paths so you shouldn't need to put the project folder on your PYTHONPATH

=== Step 3 ===

Create a postgis enabled database called geographic_admin
{{{
# This is an example using an existing postgis-enabled db called `template_postgis`
$ createdb -T template_postgis -U postgres geographic_admin
}}}
 * Note: the load_data.py script (see Step 7 below) will attempt to add the google mercator projection, which is not available by default in the spatial_ref_sys table provided by PostGIS. If you do not rely on this script to load data you will need to add the google projection into your database if you do not already have it within your template postgis database. This projection is found in the [http://geodjango-basic-apps.googlecode.com/svn-history/r2/trunk/projects/geographic_admin/utilities/ utilities folder] as an sql insert and can also be downloaded from: http://spatialreference.org/ref/user/google-projection/

=== Step 4 ===

Set your postgres user and password in settings.py

=== Step 5 ===

Create your database schema
 a. First test what creation will look like with:
{{{
$ python manage.py sqlall world
# if you get an error that says: 
# ImportError: No module named django.core.management
# then go back to Step 1!
}}}

 You should get the table creation SQL output with special OpenGIS geometry hooks:
{{{
BEGIN;
CREATE TABLE "world_worldborders" (
    "id" serial NOT NULL PRIMARY KEY,
    "name" varchar(50) NOT NULL,
    "area" integer NOT NULL,
    "pop2005" integer NOT NULL,
    "fips" varchar(2) NOT NULL,
    "iso2" varchar(2) NOT NULL,
    "iso3" varchar(3) NOT NULL,
    "un" integer NOT NULL,
    "region" integer NOT NULL,
    "subregion" integer NOT NULL,
    "lon" numeric(8, 3) NOT NULL,
    "lat" numeric(7, 3) NOT NULL
)
;
SELECT AddGeometryColumn('world_worldborders', 'geometry', 4326, 'MULTIPOLYGON', 2);
ALTER TABLE "world_worldborders" ALTER "geometry" SET NOT NULL;
CREATE INDEX "world_worldborders_geometry_id" ON "world_worldborders" USING GIST ( "geometry" GIST_GEOMETRY_OPS );
COMMIT;
}}}
 
 b. Then actually create your tables with:
{{{
$ python manage.py syncdb
#say yes to the prompt to create a superuser (this will be your Admin login)
}}}

 * Make sure in the syncdb output you see the line:
{{{
Installing custom SQL for world.WorldBorders model
}}}

=== Step 6 ===

Test your blank application by running the development server
{{{
$ python manage.py runserver
# ...then go to http://localhost:8000/
#...quit with ctrl -c
}}}

if you are installing on a remote server and want to view via the web:
{{{
$ python manage.py runserver 0.0.0.0:8000
# ...then go to http://your_domain_name:8000/
}}}

=== Step 7 ===

Load the sample data
{{{
$ python load_data.py
}}}
 * This should output the countries loaded if successful:
{{{
[...]
Saved: Falkland Islands (Malvinas)
Saved: Micronesia, Federated States of
Saved: French Polynesia
Saved: France
Saved: Gambia
Saved: Gabon
Saved: Georgia
Saved: Ghana
[...]
}}}

=== Step 8 ===

Run the server again and enjoy testing out the Admin and Databrowse
{{{
$ python manage.py runserver
}}}



= FAQ =

Q: What version of Django do I need to use to get !GeoDjango?

A: As of August 5th, !GeoDjango can be found in SVN trunk within the contrib/gis folder. Download a checkout of svn trunk or wait for the Django 1.0 release.

Q: Okay, so this is a full example project, but is there a tutorial on how to add !GeoDjango functionality to my existing application?

A: No, not yet. But, in general to enable !GeoDjango within any of your existing Django Projects you must start by adding 'django.contrib.gis' to your INSTALLED_APPS setting, override the default manager on your models, and then import your geometry fields from django.contrib.gis.db. Then you will have the !GeoDjango methods available on your models and you can play around with the new api features. 


TODO...